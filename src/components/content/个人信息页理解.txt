个人信息页并未完全完善,(以后有时间再完善)
如:
1.增加正则匹配实现报错功能,
2.介绍文本域响应式显示字数0/300,
3.判断页面是否改动而进行提交按钮@click的渲染,
4.取消按钮也是如此
5.自定义下拉框样式设置

一:
排版问题:左侧文字对齐与右侧文本框对齐
将所有div进行绝对定位,对于每一个div以及其中的元素进行单独设置margin-top值

二:
v-model与表单
1. text,textarea => 直接进行一个v-model的双向绑定
maxlength="300"设置最长字符数
2. 单选框radio
例子:v-model和value配合进行单选绑定
<input type="radio" name='sex' value="0" v-model="radio">保密
<input type="radio" name='sex' value="1" v-model="radio">男
<input type="radio" name='sex' value="2" v-model="radio">女
3. 下拉框select
例子:v-model和value配合进行下拉选中绑定 :value绑定数据
<select name="" id="" v-model="monthValue">
	<option :value="index+1" v-for="(item,index) in 12">{{index+1}}月</option>
</select>
4. 提交文件file 属性multiple(可提交多个文件) 
因为该标签样式不好修改设置因此通常设置hidden隐藏,点击button或者其他元素时将点击事件传给他
例子:
vue3因为在setup中设置了const file = ref(null) 获取input标签因此在button中可直接使用file.click()
<button @click="file.click()">修改头像</button>
<input type="file" ref='file' hidden="hidden" accept="image/*" @change="onFileChange">

三:
1. input file中的选择图片必须设置@change事件而不是@click事件,
同时在获取完图片后必须files.value = ''清空value,防止相同文件不触发事件
例子:
2. window.URL.createObjectURL(files)获取图片的url信息,类似解码功能吧?
3. 此处必须通过img.onload监听图片点击选中确认操作,否则将不能获取到该图片的任何信息img.naturalWidth/img.naturalHeight

const onFileChange = () => {
	let files = file.value.files[0]
	let img = new Image();
	img.src = window.URL.createObjectURL(files)
	img.onload = function() {
		if (img.naturalWidth < 320 || img.naturalHeight < 320) {
			Toast({
				message: '请选择分辨率超过320*320大小的图片',
				position: 'top'
			})
			files.value = ''
			return
		}
		imgSize.value = img.naturalWidth
		previewImage.value = files
		showPopup()
	}
}

四:
字符串截取
str = str.slice(0, 2)
for in遍历 i的值类型为String,这样遍历可获取设置对象中对应的键与值
单纯for循环不能实现键值获取以及不规则键名设置
例子:
for (let i in areaList.city_list) {
	if (i.slice(0, 2) == val) {
		o[i] = areaList.city_list[i];
	}
}

五:
watch功能强大
可实现多个数值监听,只要有一个发生变化,输出对应的数组[]
监听ref与reactive
vue3设计的一个缺点吧?只能针对ref,reactive object,array,function,因此监听reactive数据时
需要如:()=>state.yearValue进行转化为reactive object类型
1. 监听ref:
例子:yearValue, monthValue为ref值
watch([yearValue, monthValue], (newValue, oldValue) => {
	var day = new Date(newValue[0], newValue[1], 0);
	currentDay.value = day.getDate()
})
2. 监听reactive：
例子:yearValue, monthValue为reactive值
watch([()=>state.yearValue, ()=>state.monthValue], (newValue, oldValue) => {
	var day = new Date(newValue[0], newValue[1], 0);
	currentDay.value = day.getDate()
})

六:
Cropper.js使用体会:
1. 安装基本信息设置:
npm或者yarn安装并将
import Cropper from 'cropperjs'
import 'cropperjs/dist/cropper.css'
进行导入
2. css设置:
例子:
<div class="before"></div>//预览区域
<div class="container">//总宽高
	<div class="img-container">//外层限制
		<img :src="image" ref="photo" alt=""> //显示区域
	</div>
</div>
3. setup中将cropper设置为null或者''
例子:
const cropper = ref(null);
4. 使用获取并设置图片,获取img标签,第一个参数注意必须img标签或者canvas标签,并设置基本配置信息
例子:
const init = () => {
	image.value = window.URL.createObjectURL(props.previewImage),
	//在下一个周期进行渲染
	nextTick(()=>{
		cropper.value = new Cropper(photo.value, {
			viewMode: 1,//cropper的视图模式
			dragMode: 'none',//底部不可移动
			initialAspectRatio: 1,
			aspectRatio: 1,
			preview: '.before,.biger',//预览区域
			background: false,//背景透明或者显示底色
			autoCropArea: 0.9,//选中区域大小
			cropBoxResizable: false,//选中部分不可改变大小
			zoomOnWheel: false,//不可使用鼠标滚轮
		})
	})
}
5. cropper.value中有各种属性可获取裁剪偏移数据,如:maxTop,maxLeft,top,left,width,height,
naturalWidth,naturalHeight等等
6. 两种情况前端处理发给后端存储,直接将数据将图片裁剪数据放与formData中让后端自行设置获取,formData中的imgFile为后端给的值
例子:前端处理:
const onGetCroppedCanvas = () => {
	return new Promise( resolve => {
		cropper.value.getCroppedCanvas().toBlob( blob => {
			resolve(blob)
		})
	})
}
const file = await onGetCroppedCanvas()
const formData = new FormData()			
let fileData = file
formData.append('imgFile', fileData)
例子:后端处理:
const formData = new FormData()			
let fileData = props.previewImage
formData.append('imgFile', fileData) 
7. 关于图片裁剪类接口上传问题:
传递方式 method: 'post',(看后端需求)
设置后端给的消息头
例子:
headers: {
	'Content-Type': 'multipart/form-data',
},
将formData传给data
涉及登录,图片上传之类的加上timestamp时间戳防止缓存,将imgSize,imgX,imgY,timestamp
等数据传给params(看后端是否有这个必传的需求)
withCredentials: true//关键:跨域设置获取cookie请求头，否则将为null
(登录调用接口后才有cookie,未登录则无cookie请求头,不能传输图片等信息,除非手动添加cookie值)

七:
接口处简写,选传数据,必传数据,默认数据以及data,headers,params共存处理
默认数据参数最好写在最后 
例子1: 前端接口直接
const res = await updatedAvatar(imgSize.value,0,0,Date.now(),formData)使用

export const updatedAvatar = (imgSize=300,imgX=0,imgY=0,timestamp,data) => {
	return request({
		method: 'post',
		url:'/avatar/upload',
		params:{
			imgSize,
			imgX,
			imgY,
			timestamp
		},
		headers: {
		  'Content-Type': 'multipart/form-data',
		},
		data
	})
}
例子2:
前端手动传递:
const repwd = await register({
  phone:cellphone.value,
  password:password.value,
  captcha:verifyCode.value
})

export const register = params =>{
	return request({
		url:'/register/cellphone',
		params
	})
}
